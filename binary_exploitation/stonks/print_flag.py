# read the data from stdin to which it is piped
# split it into the list at the separation points
data = input()[4:].split(".")

# decode each 32 bit value into a bytearray
# when it comes from stdin it will be interpreted as a string
decoded_data = [bytearray.fromhex(d) for d in data]

# join it all together into one large bytearray
# search that bytearray for the bytearra representation of "pico" in reverse, as this is how all flags start
# divide by 4 as we want to then find it within our decoded_data_list
loc = b"".join(decoded_data).find("ocip".encode())//4

# find the elements in the decoded data list that correspond to the flag
# the flag string will be stored in memory in chunks of four bytes (the size of one memory address)
# each individual chunk has to be reversed as the architecture of the server seems to be little endian
print("".join([d.decode()[::-1] for d in decoded_data[loc:loc+9]] + [decoded_data[loc+9][-1:].decode()]))